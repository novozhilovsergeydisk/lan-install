diff --git a/public/js/handler.js b/public/js/handler.js
index 6cb00cf..361ad77 100644
--- a/public/js/handler.js
+++ b/public/js/handler.js
@@ -261,7 +261,7 @@ function applyFilters() {
                             <td class="text-nowrap">
                                 <div class="d-flex flex-column gap-1">
                                     ${request.status !== 'completed' ? `
-                                        <button data-request-id="${request.id}" type="button" class="btn btn-sm btn-custom-brown p-1 close-request-btn" onclick="closeRequest(${request.id}); return false;">
+                                        <button data-request-id="${request.id}" type="button" class="btn btn-sm btn-custom-brown p-1 close-request-btn">
                                             Закрыть заявку
                                         </button>
                                     ` : ''}
@@ -907,22 +907,22 @@ function initializePage() {
                             'X-Requested-With': 'XMLHttpRequest'
                         }
                     });
-                    
+
                     if (!response.ok) {
                         throw new Error(`Ошибка HTTP! Статус: ${response.status}`);
                     }
-                    
+
                     const data = await response.json();
                     console.log('Ответ сервера:', data);
-                    
+
                     if (data.success) {
                         if (data.leaders && data.leaders.length > 0) {
                             brigadeLeaders = data.leaders;
                             console.log('Получен список бригадиров:', brigadeLeaders);
-                            
+
                             // Очищаем и заполняем выпадающий список
                             brigadeLeaderSelect.innerHTML = '<option value="" selected disabled>Выберите бригадира...</option>';
-                            
+
                             // Добавляем бригадиров в выпадающий список
                             brigadeLeaders.forEach(leader => {
                                 const option = document.createElement('option');
@@ -930,7 +930,7 @@ function initializePage() {
                                 option.textContent = leader.name;
                                 brigadeLeaderSelect.appendChild(option);
                             });
-                            
+
                             // Показываем контейнер с выбором бригадира
                             brigadeLeaderFilter.classList.remove('d-none');
                         } else {
@@ -953,7 +953,7 @@ function initializePage() {
                     brigadeLeaderFilter.classList.add('d-none');
                     // Снимаем флажок при ошибке
                     teamCheckbox.checked = false;
-                    
+
                     // Показываем сообщение об ошибке
                     showAlert('Произошла ошибка при загрузке списка бригадиров', 'danger');
                 }
@@ -965,13 +965,13 @@ function initializePage() {
                 brigadeLeaderSelect.value = '';
                 // Очищаем список бригадиров
                 brigadeLeaders = [];
-                
+
                 // Здесь можно добавить сброс фильтрации по бригадиру
                 // Например, показать все заявки
                 // applyFilters();
             }
         });
-        
+
         // Обработчик выбора бригадира
         brigadeLeaderSelect.addEventListener('change', function() {
             const selectedLeaderId = this.value;
@@ -999,11 +999,11 @@ function setupBrigadeAttachment() {
             const brigadeSelect = document.getElementById('brigade-leader-select');
             const attachButton = document.getElementById('attach-brigade-button');
             const filterContainer = document.getElementById('brigade-leader-filter');
-            
+
             if (brigadeSelect && filterContainer) {
                 // Добавляем классы для отображения в строку
                 filterContainer.classList.add('d-flex', 'align-items-center');
-                
+
                 if (e.target.checked) {
                     // Если кнопка еще не создана - создаем ее
                     if (!attachButton) {
@@ -1016,39 +1016,39 @@ function setupBrigadeAttachment() {
                         button.onclick = async function() {
                             const select = document.getElementById('brigade-leader-select');
                             const checkedCheckbox = document.querySelector('input[type="checkbox"].request-checkbox:checked');
-                            
+
                             if (!select.value) {
                                 console.log('Бригадир не выбран!');
                                 return;
                             }
-                            
+
                             if (!checkedCheckbox) {
                                 console.log('Не выбрана ни одна заявка!');
                                 return;
                             }
-                            
+
                             const leaderId = select.value;
                             const requestId = checkedCheckbox.value;
                             const brigadeName = select.options[select.selectedIndex].text;
-                            
+
                             console.log(`ID выбранной заявки: ${requestId}`);
                             console.log(`ID выбранного бригадира: ${leaderId}`);
-                            
+
                             try {
                                 console.log('1. Получаем данные о бригаде...');
                                 const brigadeResponse = await fetch(`/api/requests/brigade/by-leader/${leaderId}`);
                                 const brigadeData = await brigadeResponse.json();
-                                
+
                                 console.log('Ответ от API бригады:', brigadeData);
-                                
+
                                 if (!brigadeResponse.ok) {
                                     throw new Error(brigadeData.message || `Ошибка ${brigadeResponse.status} при получении данных о бригаде`);
                                 }
-                                
+
                                 if (!brigadeData.data || !brigadeData.data.brigade_id) {
                                     throw new Error('Не удалось получить ID бригады из ответа сервера');
                                 }
-                                
+
                                 console.log('2. Отправляем запрос на обновление заявки...');
                                 const updateResponse = await fetch('/api/requests/update-brigade', {
                                     method: 'POST',
@@ -1062,28 +1062,28 @@ function setupBrigadeAttachment() {
                                         request_id: requestId
                                     })
                                 });
-                                
+
                                 const updateData = await updateResponse.json().catch(() => ({}));
                                 console.log('Ответ от API обновления заявки:', updateResponse.status, updateData);
-                                
+
                                 if (!updateResponse.ok) {
-                                    const errorMessage = updateData.message || 
-                                                       updateData.error || 
+                                    const errorMessage = updateData.message ||
+                                                       updateData.error ||
                                                        (updateData.error_details ? JSON.stringify(updateData.error_details) : 'Неизвестная ошибка');
                                     throw new Error(`Ошибка ${updateResponse.status}: ${errorMessage}`);
                                 }
-                                
+
                                 console.log(`Бригадир ${brigadeName} (ID: ${leaderId}) успешно прикреплен к заявке ${requestId}`);
-                                
+
                                 // 3. Обновляем страницу для отображения изменений
                                 window.location.reload();
-                                
+
                             } catch (error) {
                                 console.error('Ошибка при прикреплении бригады:', error.message);
                                 alert(`Ошибка: ${error.message}`);
                             }
                         };
-                        
+
                         // Вставляем кнопку после селекта
                         filterContainer.appendChild(button);
                     } else {
@@ -1107,30 +1107,30 @@ function setupBrigadeAttachment() {
             const checkbox = e.target;
             const requestId = checkbox.value;
             const row = checkbox.closest('tr');
-            
+
             // Находим select с бригадирами в строке
             const brigadeSelect = row.querySelector('select#brigade-leader-select');
-            
+
             if (brigadeSelect) {
                 // Удаляем существующую кнопку, если есть
                 const existingButton = brigadeSelect.nextElementSibling;
                 if (existingButton && existingButton.matches('.attach-brigade-button')) {
                     existingButton.remove();
                 }
-                
+
                 // Если чекбокс отмечен, добавляем кнопку
                 if (checkbox.checked) {
                     const button = document.createElement('button');
                     button.className = 'btn btn-sm btn-primary attach-brigade-button';
                     button.textContent = 'Прикрепить бригаду к заявке';
                     button.style.marginLeft = '10px';
-                    
+
                     // Моковый обработчик
                     button.addEventListener('click', function() {
                         console.log('Кнопка нажата для заявки', requestId);
                         console.log('Выбран бригадир с ID:', brigadeSelect.value);
                     });
-                    
+
                     // Вставляем кнопку после select
                     brigadeSelect.parentNode.insertBefore(button, brigadeSelect.nextSibling);
                 }
