diff --git a/app/Http/Controllers/BrigadeController.php b/app/Http/Controllers/BrigadeController.php
index dafebeb..04db65d 100644
--- a/app/Http/Controllers/BrigadeController.php
+++ b/app/Http/Controllers/BrigadeController.php
@@ -81,31 +81,56 @@ public function create()
 
     public function store(Request $request)
     {
-        $request->validate([
-            'name' => 'required|string|max:255',
-            'leader_id' => 'required|exists:employees,id',
-            'members' => 'required|array|min:1',
-            'members.*' => 'exists:employees,id',
-        ]);
-
-        // Вставка бригады
-        DB::insert("INSERT INTO brigades (name, leader_id) VALUES (?, ?)", [
-            $request->input('name'),
-            $request->input('leader_id'),
-        ]);
-
-        // Получаем ID только что вставленной бригады
-        $brigadeId = DB::getPdo()->lastInsertId();
-
-        // Вставка участников бригады
-        foreach ($request->input('members') as $memberId) {
-            DB::insert("INSERT INTO brigade_members (brigade_id, employee_id) VALUES (?, ?)", [
-                $brigadeId,
-                $memberId,
+        try {
+            $validated = $request->validate([
+                'name' => 'required|string|max:255',
+                'leader_id' => 'required|exists:employees,id',
+                'members' => 'required|array|min:1',
+                'members.*' => 'exists:employees,id',
+            ], [
+                'name.required' => 'Название бригады обязательно для заполнения',
+                'leader_id.required' => 'Необходимо выбрать бригадира',
+                'members.required' => 'Необходимо добавить хотя бы одного участника',
+                'members.min' => 'Необходимо добавить хотя бы одного участника',
             ]);
-        }
 
-        return redirect()->back()->with('success', 'Бригада успешно создана');
+            DB::beginTransaction();
+
+            // Вставка бригады
+            DB::insert("INSERT INTO brigades (name, leader_id, formation_date) VALUES (?, ?, CURRENT_DATE)", [
+                $validated['name'],
+                $validated['leader_id'],
+            ]);
+
+            $brigadeId = DB::getPdo()->lastInsertId();
+
+            // Фильтруем участников, исключая бригадира
+            $members = array_diff($validated['members'], [$validated['leader_id']]);
+            
+            // Вставка участников бригады
+            if (!empty($members)) {
+                $values = array_map(fn($memberId) => "($brigadeId, $memberId)", $members);
+                DB::insert("INSERT INTO brigade_members (brigade_id, employee_id) VALUES " . implode(',', $values));
+            }
+
+            DB::commit();
+
+            return response()->json([
+                'success' => true,
+                'message' => 'Бригада успешно создана',
+                'brigade_id' => $brigadeId
+            ]);
+
+        } catch (\Exception $e) {
+            DB::rollBack();
+            \Log::error('Ошибка при создании бригады: ' . $e->getMessage());
+            
+            return response()->json([
+                'success' => false,
+                'message' => 'Произошла ошибка при создании бригады',
+                'error' => config('app.debug') ? $e->getMessage() : null
+            ], 500);
+        }
     }
 
     /**
diff --git a/public/js/handler.js b/public/js/handler.js
index 621605e..3d4a162 100644
--- a/public/js/handler.js
+++ b/public/js/handler.js
@@ -1055,16 +1055,12 @@ function hanlerAddToBrigade() {
 }
 
 function handlerCreateBrigade() {
-        // console.log('DOM полностью загружен');
         const createBtn = document.getElementById('createBrigadeBtn');
-        // console.log('Найдена кнопка:', createBtn);
 
         if (createBtn) {
             createBtn.addEventListener('click', function(e) {
-                // console.log('Клик по кнопке createBrigadeBtn');
                 e.preventDefault();
                 console.clear();
-                console.log('=== ДЕБАГ ИНФОРМАЦИЯ ===');
 
                 // Получаем данные формы
                 const form = document.getElementById('brigadeForm');
@@ -1074,45 +1070,139 @@ function handlerCreateBrigade() {
                 }
 
                 const formData = new FormData(form);
-
-                // Проверяем выбран ли бригадир
-                const leaderId = formData.get('leader_id');
-                if (!leaderId) {
-                    console.warn('ОШИБКА: Не выбран бригадир');
-                    showAlert('Пожалуйста, выберите бригадира', 'warning');
-                    return;
-                }
-
-                // Выводим общую информацию о форме
-                console.log('=== ДАННЫЕ ФОРМЫ ===');
+                
+                // Собираем все данные формы в объект
+                const formValues = {};
                 for (let [key, value] of formData.entries()) {
-                    console.log(`${key}:`, value);
+                    // Обрабатываем массивы (например, brigade_members[])
+                    if (key.endsWith('[]')) {
+                        const baseKey = key.slice(0, -2);
+                        if (!formValues[baseKey]) {
+                            formValues[baseKey] = [];
+                        }
+                        formValues[baseKey].push(value);
+                    } else {
+                        formValues[key] = value;
+                    }
                 }
 
-                // Проверяем выбранных сотрудников
+                // Получаем дополнительную информацию о выбранных сотрудниках
                 const brigadeMembers = document.querySelectorAll('#brigadeMembers [name="brigade_members[]"]');
-                console.log('\n=== ВЫБРАННЫЕ СОТРУДНИКИ ===');
-                console.log('Всего выбрано:', brigadeMembers.length);
+                const membersInfo = Array.from(brigadeMembers).map(member => ({
+                    id: parseInt(member.value),
+                    employee_id: parseInt(member.dataset.employeeId)
+                }));
+
+                // Формируем итоговый JSON
+                const formJson = {
+                    formData: formValues,
+                    members: membersInfo,
+                    metadata: {
+                        totalMembers: membersInfo.length,
+                        hasLeader: !!formValues.leader_id,
+                        timestamp: new Date().toISOString()
+                    }
+                };
+
+                // Выводим JSON в консоль
+                console.log('=== ДАННЫЕ ФОРМЫ В ФОРМАТЕ JSON ===');
+                console.log(JSON.stringify(formJson, null, 2));
+
+                // Проверяем обязательные поля
+                if (!formValues.leader_id) {
+                    showAlert('Пожалуйста, выберите бригадира', 'warning');
+                    return;
+                }
 
-                if (brigadeMembers.length === 0) {
-                    console.warn('ОШИБКА: Не выбрано ни одного сотрудника');
+                if (membersInfo.length === 0) {
                     showAlert('Пожалуйста, добавьте хотя бы одного сотрудника в бригаду', 'warning');
                     return;
                 }
 
-                // Выводим детальную информацию о каждом сотруднике
-                brigadeMembers.forEach((input, index) => {
-                    console.log(`\nСотрудник #${index + 1}:`);
-                    console.log('ID:', input.value);
-                    console.log('data-employee-id:', input.dataset.employeeId);
-                    console.log('HTML:', input.outerHTML);
-                });
+                showAlert('Данные формы успешно обработаны!', 'success');
 
-                console.log('\n=== ДОПОЛНИТЕЛЬНАЯ ИНФОРМАЦИЯ ===');
-                console.log('Название бригады:', formData.get('name'));
-                console.log('ID бригадира:', formData.get('leader_id'));
+                // Функция для отправки данных на сервер
+                const createBrigade = async () => {
+                    try {
+                        console.log('Отправка запроса на создание бригады...');
+                        const requestData = {
+                            ...formJson.formData,
+                            members: formJson.members.map(m => m.employee_id)
+                        };
+                        console.log('Данные для отправки:', requestData);
+                        
+                        const response = await fetch('/brigades', {
+                            method: 'POST',
+                            headers: {
+                                'Content-Type': 'application/json',
+                                'X-CSRF-TOKEN': formJson.formData._token,
+                                'Accept': 'application/json',
+                                'X-Requested-With': 'XMLHttpRequest'
+                            },
+                            body: JSON.stringify(requestData)
+                        });
+
+                        // Проверяем Content-Type ответа
+                        const contentType = response.headers.get('content-type');
+                        let data;
+                        
+                        if (contentType && contentType.includes('application/json')) {
+                            data = await response.json();
+                        } else {
+                            const text = await response.text();
+                            console.error('Ожидался JSON, но получен:', text);
+                            throw new Error('Сервер вернул неожиданный ответ. Проверьте консоль для деталей.');
+                        }
 
-                showAlert('Отправка формы будет реализована в ближайшее время!', 'info');
+                        if (!response.ok) {
+                            throw new Error(data.message || `Ошибка ${response.status}: ${response.statusText}`);
+                        }
+
+                        console.log('Ответ сервера:', data);
+                        if (data.success) {
+                            showAlert('Бригада успешно создана!', 'success');
+                            
+                            // Закрываем модальное окно, если оно открыто
+                            const modal = bootstrap.Modal.getInstance(document.getElementById('createBrigadeModal'));
+                            if (modal) {
+                                modal.hide();
+                            }
+                            
+                            // Очищаем форму
+                            const form = document.getElementById('brigadeForm');
+                            if (form) {
+                                form.reset();
+                            }
+                            
+                            // Обновляем список бригад (если есть такой элемент)
+                            const brigadesContainer = document.querySelector('[data-brigades-container]');
+                            if (brigadesContainer) {
+                                // Здесь можно добавить код для обновления списка бригад
+                                // Например, через AJAX-запрос за новым списком
+                                // или просто добавить новую бригаду в список
+                                console.log('Здесь будет обновление списка бригад');
+                            }
+                            
+                            // Если есть таблица с бригадами, можно обновить её
+                            const brigadesTable = document.querySelector('table[data-brigades-table]');
+                            if (brigadesTable) {
+                                // Здесь можно добавить строку с новой бригадой в таблицу
+                                console.log('Здесь будет обновление таблицы бригад');
+                            }
+                            
+                        } else {
+                            throw new Error(data.message || 'Неизвестная ошибка сервера');
+                        }
+                        
+                    } catch (error) {
+                        console.error('Ошибка при создании бригады:', error);
+                        console.error('Полный стек ошибки:', error.stack);
+                        showAlert(`Ошибка: ${error.message}`, 'danger');
+                    }
+                };
+                
+                // Вызываем функцию создания бригады
+                createBrigade();
 
                 // Для отправки формы раскомментируйте строку ниже
                 // form.submit();
