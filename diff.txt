diff --git a/resources/views/welcome.blade.php b/resources/views/welcome.blade.php
index dab2c6f..c8815e9 100644
--- a/resources/views/welcome.blade.php
+++ b/resources/views/welcome.blade.php
@@ -1635,9 +1635,7 @@ class="text-danger">*</span></label>
                     <div class="mb-3">
                         <button type="button" class="btn btn-info mb-3" id="fillMockDataBtn" style="margin-top: 14px;">Автозаполнение</button>
                         <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
-                        <button type="button" class="btn btn-primary" id="submitRequest" onclick="submitRequestForm()">Создать
-                            заявку
-                        </button>
+                        <button type="button" class="btn btn-primary" id="submitRequest" onclick="submitRequestForm()">Создать заявку</button>
                     </div>
                 </form>
             </div>
@@ -1959,187 +1957,6 @@ function validateForm(form) {
             }
         });
 
-        async function submitRequestForm(event) {
-            // Предотвращаем стандартную отправку формы
-            if (event) {
-                event.preventDefault();
-                event.stopPropagation();
-            }
-
-            const form = document.getElementById('newRequestForm');
-            const submitBtn = document.getElementById('submitRequest');
-
-            // Validate form
-            if (!validateForm(form)) {
-                utils.showAlert('Пожалуйста, заполните все обязательные поля корректно', 'warning');
-                return false;
-            }
-            const requiredFields = form.querySelectorAll('[required]');
-            let isValid = true;
-
-            requiredFields.forEach(field => {
-                if (!field.value.trim()) {
-                    field.classList.add('is-invalid');
-                    isValid = false;
-                } else {
-                    field.classList.remove('is-invalid');
-                }
-            });
-
-            if (!isValid) {
-                form.classList.add('was-validated');
-                utils.showAlert('Пожалуйста, заполните все обязательные поля', 'danger');
-                return;
-            }
-
-            try {
-                submitBtn.disabled = true;
-                submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Создание...';
-
-                // Get all form inputs
-                const formInputs = form.querySelectorAll('input, select, textarea');
-                const data = {_token: ''};
-
-                // Convert form data to object
-                formInputs.forEach(input => {
-                    if (input.type === 'checkbox' || input.type === 'radio') {
-                        if (input.checked) {
-                            if (!data[input.name]) {
-                                data[input.name] = [input.value];
-                            } else if (Array.isArray(data[input.name])) {
-                                data[input.name].push(input.value);
-                            } else {
-                                data[input.name] = [data[input.name], input.value];
-                            }
-                        }
-                    } else {
-                        if (data[input.name] !== undefined) {
-                            if (!Array.isArray(data[input.name])) {
-                                data[input.name] = [data[input.name]];
-                            }
-                            data[input.name].push(input.value);
-                        } else {
-                            data[input.name] = input.value;
-                        }
-                    }
-                });
-
-
-                // Process addresses
-                const addresses = [];
-                const cityIds = Array.isArray(data['city_id']) ? data['city_id'] : (data['city_id'] ? [data['city_id']] : []);
-                const streets = Array.isArray(data['street']) ? data['street'] : (data['street'] ? [data['street']] : []);
-                const houses = Array.isArray(data['house']) ? data['house'] : (data['house'] ? [data['house']] : []);
-                const addressComments = Array.isArray(data['address_comment']) ? data['address_comment'] : (data['address_comment'] ? [data['address_comment']] : []);
-
-                // Debug information
-                // console.log('cityIds:', cityIds);
-                // console.log('streets:', streets);
-                // console.log('houses:', houses);
-                // console.log('addressComments:', addressComments);
-                // console.log('FormData:', data);
-
-                // Создаем объект с данными для отправки
-                const requestData = {
-                    _token: data._token,
-                    request: {
-                        request_type_id: data.request_type_id,
-                        status_id: data.status_id,
-                        comment: data.comment || '',
-                        execution_date: data.execution_date || null,
-                        execution_time: data.execution_time || null,
-                        brigade_id: data.brigade_id || null,
-                        operator_id: data.operator_id || null
-                    },
-                    addresses: [],
-                    client_organization: data.client_organization || ''
-                };
-
-                // Добавляем данные клиента, только если заполнено хотя бы одно из полей
-                if (data.client_name || data.client_phone || data.client_organization) {
-                    requestData.client = {
-                        fio: data.client_name || '',
-                        phone: data.client_phone || '',
-                        organization: data.client_organization || ''
-                    };
-                }
-
-                // Добавляем адреса
-                for (let i = 0; i < cityIds.length; i++) {
-                    if (cityIds[i] && streets[i] && houses[i]) {
-                        requestData.addresses.push({
-                            city_id: cityIds[i],
-                            street: streets[i],
-                            house: houses[i],
-                            comment: addressComments[i] || ''
-                        });
-                    }
-                }
-
-                // console.log('Request data to be sent:', JSON.stringify(requestData, null, 2));
-
-                if (requestData.addresses.length === 0) {
-                    throw new Error('Необходимо указать хотя бы один адрес');
-                }
-
-                // console.log('Sending request to /api/requests with data:', JSON.stringify(requestData));
-
-                const response = await fetch('/api/requests', {
-                    method: 'POST',
-                    headers: {
-                        'Content-Type': 'application/json',
-                        'Accept': 'application/json',
-                        'X-CSRF-TOKEN': requestData._token
-                    },
-                    body: JSON.stringify(requestData)
-                });
-
-                const responseData = await response.json();
-                // console.log('Server response:', response.status, responseData);
-
-                if (!response.ok) {
-                    if (response.status === 422) {
-                        // Обработка ошибок валидации
-                        const errors = responseData.errors || {};
-                        const errorMessages = Object.values(errors).flat().join('\n');
-                        throw new Error(`Ошибка валидации: ${errorMessages}`);
-                    }
-                    throw new Error(responseData.message || 'Ошибка при создании заявки');
-                }
-
-                // Успешное создание заявки
-                utils.showAlert('Заявка успешно создана!', 'success');
-
-                // Очищаем форму
-                form.reset();
-
-                // Закрываем модальное окно
-                const modal = bootstrap.Modal.getInstance(document.getElementById('newRequestModal'));
-                modal.hide();
-
-                // Очищаем форму
-                form.reset();
-
-                // Обновляем таблицу заявок
-                try {
-                    await loadRequests();
-                } catch (error) {
-                    console.error('Ошибка при обновлении таблицы заявок:', error);
-                    // В случае ошибки просто перезагружаем страницу
-                    window.location.reload();
-                }
-
-                return responseData;
-
-            } catch (error) {
-                console.error('Error submitting request:', error);
-                utils.showAlert(error.message || 'Произошла ошибка при создании заявки', 'danger');
-            } finally {
-                submitBtn.disabled = false;
-                submitBtn.textContent = 'Создать заявку';
-            }
-        }
-
         // Function to load and update the requests table via AJAX
         async function loadRequests() {
             try {
